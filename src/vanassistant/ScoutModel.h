#pragma once

#include "../../include/IDrzEngine.h"

#include "Model.h"
#include "Scene.h"

#include <chrono>
#include <cmath>
#include <iostream>
#include <random>

class ScoutJawModel : public Model {
  public:
    
    std::vector<vec3d> verts = {
      {0.498453, 0.609942, -0.121895},
      {0.0091595, 0.99147, -0.234461},
      {0.0091595, 0.609942, -0.136174},
      {-0.480137, 0.609942, -0.121895},
      {0.508491, 0.99133, -0.220153},
      {0.30827, 1.0936, -1.03093},
      {0.0091595, 1.09374, -1.08808},
      {0.328136, 0.562328, -1.11536},
      {0.0091595, 0.562328, -1.17249},
      {-0.289954, 1.0936, -1.03093},
      {-0.490175, 0.99133, -0.220153},
      {-0.30982, 0.562328, -1.11536},
    };
    
    std::vector<face> faces = {
      {1, 5, 2},
      {1, 2, 3},
      {2, 4, 3},
      {2, 11, 4},
      {2, 5, 6},
      {2, 6, 7},
      {10, 2, 7},
      {10, 11, 2},
      {8, 5, 1},
      {8, 6, 5},
      {7, 6, 8},
      {7, 8, 9},
      {12, 7, 9},
      {12, 10, 7},
      {11, 10, 12},
      {11, 12, 4},
    };

    ScoutJawModel() : Model(&verts, &faces){ 
      SetupModel();
    }

    //Set the current jaw angle
    //map jaw opening to min and max angles
    void SetOpening(float opening) {
      if(opening < 0.0f) {
        opening = 0.0f;
      } else if(opening > 1.0f) {
        opening = 1.0f;
      }
      this->opening = opening;
      angle = opening * (maxAngle - minAngle) + minAngle;
      SetAngle(angle);
    }

    void Update(float elapsedTime) override {

      // Rotate the model
      if(direction == 1) {
        angle += 0.001f;
      } else {
        angle -= 0.001f;
      }
      
      if(angle> maxAngle) {
        direction = -1;
      } else if (angle <= minAngle) {
        direction = 1;
      }

      Matrix4x4 matRotX = Matrix4x4::CreateRotationMatrixX(angle); 
      rotationMatrix = rotationMatrix * matRotX;
    }

  private:
    int direction = 1;  //1 for increasing angle, -1 for decreasing angle
    float opening = 0.5f;
    float angle = M_PI;
    float minAngle = -0.2f;
    float maxAngle = 0.0f;

    void SetAngle(float angle) {
      if(angle > maxAngle) {
        this->angle =  maxAngle;
      } else if (angle < minAngle) {
        this->angle = minAngle;
      } else {
        this->angle = angle;
      }
    }
};
 
//3d face model including animated subparts
class ScoutHeadModel : public Model {
  public:
    // clang-format off 
    //Hardcoded face model vertices
    std::vector<vec3d> verts = {
      {0.214413, 1.00821, 0.925092},
      {0.16661, 0.317023, 0.265114},
      {0.214413, 1.20995, 0.681492},
      {-0.196098, 1.20995, 0.681492},
      {-0.171567, 0.479458, 0.117502},
      {0.16661, 0.495012, 0.103366},
      {0.244744, 1.1923, 0.702769},
      {0.189882, 0.479458, 0.117502},
      {0.189882, 0.332577, 0.250978},
      {0.244744, 1.02586, 0.903812},
      {-0.171567, 0.332574, 0.250978},
      {-0.226429, 1.02586, 0.903812},
      {-0.148295, 0.317023, 0.265114},
      {-0.196098, 1.00821, 0.925092},
      {-0.148295, 0.495012, 0.103366},
      {-0.226429, 1.1923, 0.702769},
      {0.507854, 0.840213, -1.35998},
      {1.36524, 0.122381, -0.215765},
      {1.36524, 0.23939, -0.0001015},
      {1.36524, -0.228631, -0.0001015},
      {1.36524, 0.122381, 0.215561},
      {1.36524, -0.111622, 0.215561},
      {1.14942, 0.122381, 0.215561},
      {1.14942, -0.111622, 0.215561},
      {1.14942, -0.228631, -0.0001015},
      {1.14942, -0.111622, -0.215765},
      {1.36524, -0.111622, -0.215765},
      {1.14942, 0.122381, -0.215765},
      {1.14942, 0.23939, -0.0001015},
      {0.370818, -0.2513, -1.0831},
      {0.33537, -0.269836, -1.09465},
      {0.35959, -0.273843, -1.09465},
      {0.380125, -0.285257, -1.09465},
      {0.400869, -0.268002, -1.0831},
      {0.393844, -0.302337, -1.09465},
      {0.393844, -0.342643, -1.09465},
      {0.398664, -0.32249, -1.09465},
      {0.427997, -0.32249, -1.0831},
      {0.35959, -0.371137, -1.09465},
      {0.33537, -0.375144, -1.09465},
      {0.311146, -0.371137, -1.09465},
      {0.33537, -0.245434, -1.0831},
      {0.380125, -0.359719, -1.09465},
      {0.290612, -0.359719, -1.09465},
      {0.33537, -0.32249, -1.10297},
      {0.272076, -0.32249, -1.09465},
      {0.276892, -0.342643, -1.09465},
      {0.299922, -0.2513, -1.0831},
      {0.269871, -0.268002, -1.0831},
      {0.311146, -0.273843, -1.09465},
      {0.290612, -0.285257, -1.09465},
      {0.276892, -0.302337, -1.09465},
      {0.242739, -0.32249, -1.0831},
      {0.498453, 0.609942, -0.121895},
      {0.0091595, 0.609942, -0.136174},
      {-0.480137, 0.609942, -0.121895},
      {0.283549, 0.614877, 0.035609},
      {0.283413, 0.09786, 0.257093},
      {-0.265097, 0.09786, 0.257093},
      {-0.288851, 0.539788, 0.45276},
      {0.321808, 0.041412, 0.688398},
      {0.328136, 0.562328, -1.11536},
      {0.0091595, 0.562328, -1.17249},
      {-0.30982, 0.562328, -1.11536},
      {0.605178, 0.557032, 0.356825},
      {0.307167, 0.539788, 0.45276},
      {0.0091595, -0.436285, 0.990213},
      {0.0091595, 0.02576, 0.751503},
      {-0.303492, 0.041412, 0.688398},
      {-0.764729, 0.057071, 0.562114},
      {-0.232834, -0.561995, -1.03409},
      {-0.763357, -0.321198, -1.53264},
      {-0.240215, -0.56336, -1.79283},
      {0.25115, -0.561995, -1.03409},
      {0.258531, -0.56336, -1.79283},
      {-0.562446, 0.689965, -0.373201},
      {-0.265234, 0.614877, 0.035609},
      {0.355159, 0.561375, -1.18116},
      {-0.336843, 0.561375, -1.18116},
      {0.887309, -0.423203, -0.662599},
      {-0.860675, -0.423203, -1.53264},
      {0.0091595, -0.538135, 1.05631},
      {-0.895587, -0.381833, 0.138219},
      {-0.782418, 0.083419, -0.0749455},
      {-0.586863, 0.557032, 0.356825},
      {0.580762, 0.689965, -0.373201},
      {0.50323, 0.118153, -0.924126},
      {0.778442, -0.325073, -0.667086},
      {0.800734, 0.083419, -0.0749455},
      {0.783045, 0.057071, 0.562114},
      {0.913906, -0.381833, 0.138219},
      {0.0091595, -1.39108, 0.97769},
      {0.0091595, -1.31927, -0.0961275},
      {-0.81488, -1.32745, 0.0261905},
      {-0.724689, -1.27072, -0.822125},
      {0.29449, -1.24655, -1.18357},
      {-0.276171, -1.24655, -1.18357},
      {0.743005, -1.27072, -0.822125},
      {0.833196, -1.32745, 0.0261905},
      {0.722256, -1.3801, 0.804174},
      {-0.244668, -0.687883, -1.06225},
      {-0.868994, -0.423203, -0.662599},
      {0.262983, -0.687883, -1.06225},
      {-0.308105, -0.269843, -1.09468},
      {-0.244807, -0.322497, -1.09467},
      {-0.343553, -0.251307, -1.08312},
      {-0.283882, -0.273851, -1.09468},
      {-0.263347, -0.285264, -1.09467},
      {-0.272657, -0.251303, -1.08312},
      {-0.249627, -0.302344, -1.09467},
      {-0.222527, -0.293006, -1.08312},
      {-0.249627, -0.342643, -1.09467},
      {-0.222523, -0.351985, -1.08312},
      {-0.263347, -0.359726, -1.09467},
      {-0.332325, -0.37114, -1.09468},
      {-0.308105, -0.322497, -1.103},
      {-0.352859, -0.359726, -1.09468},
      {-0.36658, -0.342646, -1.09468},
      {-0.371399, -0.322497, -1.09468},
      {-0.272653, -0.39369, -1.08312},
      {-0.283882, -0.37114, -1.09468},
      {-0.308101, -0.375147, -1.09468},
      {-0.373601, -0.376981, -1.08313},
      {-0.352859, -0.285264, -1.09468},
      {-0.36658, -0.302351, -1.09468},
      {-0.393683, -0.29301, -1.08313},
      {-0.332325, -0.273851, -1.09468},
      {-0.373604, -0.268005, -1.08313},
      {-0.703941, -1.3801, 0.804174},
      {-0.980514, -0.479192, 0.174849},
      {0.787983, -0.421666, 0.813851},
      {0.998833, -0.479192, 0.174849},
      {0.781672, -0.321198, -1.53264},
      {1.15506, 0.144676, -0.118975},
      {1.14957, 0.361088, -0.786205},
      {0.976444, 0.559685, -1.14073},
      {0.969969, 0.67794, -1.07591},
      {0.801325, 0.640889, -1.28385},
      {0.801325, 0.758985, -1.21888},
      {0.524748, 0.739399, -1.45636},
      {0.524748, 0.857497, -1.39139},
      {1.15505, 0.026537, -0.18397},
      {1.1054, 0.357934, -0.779761},
      {1.09763, 0.465738, -0.973718},
      {0.944818, 0.546297, -1.11607},
      {0.507854, 0.72212, -1.42494},
      {-0.361928, -0.2144, -1.0185},
      {-0.308123, -0.205496, -0.799645},
      {-0.361946, -0.2144, -0.799648},
      {-0.407578, -0.239764, -0.799652},
      {-0.438067, -0.277725, -0.799652},
      {-0.44877, -0.3225, -0.799655},
      {-0.438064, -0.367272, -0.799652},
      {-0.407575, -0.405234, -0.799652},
      {-0.438046, -0.367272, -1.01851},
      {-0.361942, -0.430595, -0.799648},
      {-0.308098, -0.439498, -1.0185},
      {-0.254292, -0.430591, -0.799641},
      {-0.308119, -0.439498, -0.799645},
      {-0.178174, -0.367269, -0.799638},
      {-0.208663, -0.405234, -0.799641},
      {-0.178157, -0.367269, -1.01849},
      {-0.167468, -0.322497, -0.799638},
      {-0.178178, -0.277721, -0.799638},
      {-0.178157, -0.277721, -1.01849},
      {-0.208666, -0.239761, -0.799641},
      {-0.254296, -0.2144, -0.799641},
      {-0.308105, -0.205496, -1.0185},
      {1.10984, 0.427668, -0.0384825},
      {1.10984, 0.381724, -0.207539},
      {1.10984, 0.278481, -0.345013},
      {1.10984, 0.133662, -0.429975},
      {1.10984, 0.200305, 0.400396},
      {1.10984, -0.318727, -0.290731},
      {1.10984, -0.416913, 0.0382795},
      {1.10984, -0.398569, -0.136615},
      {1.10984, -0.122902, 0.429772},
      {0.26088, -0.68649, -1.79459},
      {1.11055, 0.0268555, -0.183771},
      {1.15435, -0.047348, -0.176323},
      {1.10984, -0.0473445, -0.176319},
      {1.15435, -0.148995, -0.0850325},
      {1.10984, -0.148995, -0.0850325},
      {1.15435, -0.160213, 0.056007},
      {1.10984, -0.0744275, 0.164178},
      {1.10984, -0.160209, 0.056007},
      {1.15435, 0.0581035, 0.176116},
      {1.15435, -0.074438, 0.164178},
      {1.10984, 0.0581035, 0.176116},
      {1.15435, 0.159747, 0.084826},
      {1.10984, 0.159754, 0.0848295},
      {1.10984, 0.170968, -0.05621},
      {1.15435, 0.170968, -0.05621},
      {0.878994, -0.423203, -1.53264},
      {-0.242564, -0.68649, -1.79459},
      {0.476021, -0.32249, -1.01848},
      {0.414474, -0.256683, -1.02924},
      {0.434826, -0.239757, -1.01848},
      {0.256263, -0.256683, -1.02924},
      {0.194719, -0.32249, -1.01848},
      {0.281543, -0.430584, -1.01848},
      {0.85238, -0.526788, 0.876894},
      {-0.769668, -0.421666, 0.813851},
      {-0.834061, -0.526788, 0.876894},
      {0.235914, -0.405226, -0.799621},
      {0.235914, -0.405226, -1.01848},
      {0.205426, -0.367269, -0.799621},
      {0.205426, -0.367269, -1.01848},
      {0.194719, -0.32249, -0.799621},
      {0.205426, -0.277714, -0.799621},
      {0.205426, -0.277714, -1.01848},
      {0.281543, -0.214392, -0.799621},
      {0.235914, -0.239757, -0.799621},
      {0.281543, -0.214392, -1.01848},
      {0.235914, -0.239757, -1.01848},
      {0.33537, -0.205485, -0.799621},
      {0.389193, -0.214392, -0.799621},
      {0.389193, -0.214392, -1.01848},
      {0.33537, -0.205485, -1.01848},
      {0.434826, -0.239757, -0.799621},
      {0.465315, -0.277714, -1.01848},
      {0.465315, -0.277714, -0.799621},
      {0.476021, -0.32249, -0.799621},
      {0.465315, -0.367269, -0.799621},
      {0.465315, -0.367269, -1.01848},
      {0.434826, -0.405226, -0.799621},
      {0.434826, -0.405226, -1.01848},
      {0.389193, -0.430584, -0.799621},
      {0.33537, -0.439492, -0.799621},
      {0.389193, -0.430584, -1.01848},
      {0.281543, -0.430584, -0.799621},
      {0.33537, -0.439492, -1.01848},
      {-0.35091, -0.408475, -1.02927},
      {-0.34355, -0.39369, -1.08312},
      {-0.400733, -0.3225, -1.08313},
      {-0.39368, -0.351985, -1.08313},
      {-0.419972, -0.3225, -1.02927},
      {-0.387208, -0.25669, -1.02927},
      {-0.350914, -0.236516, -1.02927},
      {-0.308101, -0.229436, -1.02926},
      {-0.308105, -0.245441, -1.08312},
      {-0.242606, -0.268005, -1.08312},
      {-0.204746, -0.286881, -1.02926},
      {-0.196231, -0.322497, -1.02926},
      {-0.215474, -0.322497, -1.08312},
      {-0.228994, -0.3883, -1.02926},
      {-0.242602, -0.376981, -1.08312},
      {-0.265289, -0.408475, -1.02926},
      {-0.308101, -0.399553, -1.08312},
      {-0.407554, -0.405234, -1.0185},
      {-0.387205, -0.3883, -1.02927},
      {-0.411456, -0.358113, -1.02927},
      {-0.411456, -0.286885, -1.02927},
      {-0.448752, -0.3225, -1.01851},
      {-0.438046, -0.277725, -1.01851},
      {-0.407557, -0.239764, -1.0185},
      {-0.228998, -0.25669, -1.02926},
      {-0.265293, -0.236516, -1.02926},
      {-0.254278, -0.2144, -1.0185},
      {-0.208649, -0.239761, -1.01849},
      {-0.167451, -0.322497, -1.01849},
      {-0.208646, -0.405234, -1.01849},
      {-0.204743, -0.35811, -1.02926},
      {-0.254275, -0.430591, -1.0185},
      {-0.308098, -0.415562, -1.02926},
      {-0.361924, -0.430595, -1.0185},
      {1.10984, -0.370965, 0.207333},
      {1.10984, -0.267718, 0.34481},
      {1.10984, 0.0414505, 0.449292},
      {1.06036, 0.222404, 0.445795},
      {1.10984, 0.329487, 0.290528},
      {1.10984, 0.409329, 0.136413},
      {1.06036, 0.455115, 0.151889},
      {1.06036, 0.424382, -0.231052},
      {1.10984, -0.030688, -0.449498},
      {1.10984, -0.189546, -0.400599},
      {1.06036, -0.444353, -0.152093},
      {-0.298557, -0.272135, -0.923811},
      {-0.760126, -0.325073, -0.667086},
      {-0.22282, 0.14462, -1.06073},
      {-0.484915, 0.118153, -0.924126},
      {-0.163842, 0.561375, -1.22921},
      {0.182158, 0.561375, -1.22921},
      {0.241136, 0.14462, -1.06073},
      {0.316873, -0.272135, -0.923811},
      {1.06036, -0.29868, 0.383905},
      {0.62238, -0.308854, 0.396767},
      {1.06036, -0.137442, 0.478502},
      {0.62238, -0.142216, 0.494529},
      {1.06036, 0.0455385, 0.500234},
      {0.62238, 0.046886, 0.516992},
      {0.62238, 0.229677, 0.46073},
      {1.06036, 0.366229, 0.323474},
      {0.62238, 0.378322, 0.33431},
      {0.62238, 0.470187, 0.156979},
      {1.06036, 0.475538, -0.042833},
      {0.62238, 0.491291, -0.044268},
      {0.62238, 0.319627, -0.39697},
      {0.62238, 0.438424, -0.238787},
      {1.06036, 0.309442, -0.384111},
      {0.62238, 0.152992, -0.494735},
      {1.06036, 0.148201, -0.478706},
      {0.62238, -0.036113, -0.517195},
      {1.06036, -0.0347795, -0.500437},
      {0.62238, -0.367545, -0.334513},
      {0.62238, -0.2189, -0.460932},
      {1.06036, -0.211642, -0.445998},
      {1.06036, -0.355467, -0.323676},
      {0.62238, -0.45941, -0.157185},
      {1.06036, -0.464779, 0.04263},
      {0.62238, -0.480518, 0.0440615},
      {1.06036, -0.413619, 0.23085},
      {0.62238, -0.427651, 0.238585},
      {1.11055, 0.145002, -0.118772},
      {1.15356, 0.479707, -0.722197},
      {1.05881, 0.576842, -0.895433},
      {1.09889, 0.584069, -0.909164},
      {0.938343, 0.664549, -1.05125},
      {1.10939, 0.476557, -0.71575},
      {1.05755, 0.458507, -0.959991},
      {0.774554, 0.626363, -1.25723},
      {0.774554, 0.744464, -1.19226},
      {0.370818, -0.39368, -1.0831},
      {0.414474, -0.388297, -1.02924},
      {0.400869, -0.376974, -1.0831},
      {0.420949, -0.351977, -1.0831},
      {0.438725, -0.358106, -1.02924},
      {0.447241, -0.32249, -1.02924},
      {0.420949, -0.293002, -1.0831},
      {0.438725, -0.286878, -1.02924},
      {0.378182, -0.236512, -1.02924},
      {0.33537, -0.229425, -1.02924},
      {0.292558, -0.236512, -1.02924},
      {0.232015, -0.286878, -1.02924},
      {0.249792, -0.293002, -1.0831},
      {0.223496, -0.32249, -1.02924},
      {0.249792, -0.351977, -1.0831},
      {0.232015, -0.358106, -1.02924},
      {0.256263, -0.388297, -1.02924},
      {0.269871, -0.376974, -1.0831},
      {0.299922, -0.39368, -1.0831},
      {0.292558, -0.408471, -1.02924},
      {0.33537, -0.415555, -1.02924},
      {0.33537, -0.399546, -1.0831},
      {0.378182, -0.408471, -1.02924},
    };
    std::vector<face> faces = {
      {6, 7, 8},
      {8, 10, 9},
      {8, 7, 10},
      {1, 13, 2},
      {1, 14, 13},
      {15, 3, 6},
      {15, 4, 3},
      {12, 5, 11},
      {12, 16, 5},
      {6, 3, 7},
      {1, 9, 10},
      {1, 2, 9},
      {11, 14, 12},
      {11, 13, 14},
      {16, 15, 5},
      {16, 4, 15},
      {36, 37, 38},
      {124, 125, 126},
      {157, 158, 159},
      {217, 218, 219},
      {311, 312, 313},
      {17, 140, 146},
      {17, 141, 140},
      {19, 27, 18},
      {19, 20, 27},
      {19, 22, 20},
      {19, 21, 22},
      {21, 24, 22},
      {21, 23, 24},
      {22, 25, 20},
      {22, 24, 25},
      {20, 26, 27},
      {20, 25, 26},
      {27, 28, 18},
      {27, 26, 28},
      {18, 29, 19},
      {18, 28, 29},
      {19, 23, 21},
      {19, 29, 23},
      {33, 30, 34},
      {33, 32, 30},
      {30, 31, 42},
      {30, 32, 31},
      {32, 45, 31},
      {33, 45, 32},
      {35, 45, 33},
      {35, 33, 34},
      {35, 34, 329},
      {38, 35, 329},
      {38, 37, 35},
      {36, 45, 37},
      {43, 45, 36},
      {39, 45, 43},
      {323, 39, 43},
      {40, 39, 323},
      {40, 323, 344},
      {341, 40, 344},
      {341, 41, 40},
      {37, 45, 35},
      {41, 45, 40},
      {40, 45, 39},
      {31, 48, 42},
      {323, 43, 325},
      {325, 43, 36},
      {325, 36, 326},
      {36, 38, 326},
      {44, 41, 341},
      {44, 45, 41},
      {47, 45, 44},
      {46, 45, 47},
      {53, 46, 47},
      {52, 46, 53},
      {52, 53, 335},
      {49, 52, 335},
      {49, 51, 52},
      {48, 51, 49},
      {48, 50, 51},
      {31, 50, 48},
      {31, 45, 50},
      {50, 45, 51},
      {51, 45, 52},
      {52, 45, 46},
      {53, 47, 337},
      {47, 340, 337},
      {47, 44, 340},
      {44, 341, 340},
      {57, 59, 58},
      {57, 77, 59},
      {66, 58, 61},
      {66, 57, 58},
      {59, 60, 69},
      {59, 77, 60},
      {61, 69, 68},
      {69, 61, 58},
      {69, 58, 59},
      {66, 90, 65},
      {66, 61, 90},
      {61, 131, 90},
      {67, 131, 61},
      {67, 61, 68},
      {69, 67, 68},
      {69, 203, 67},
      {203, 69, 70},
      {70, 69, 60},
      {70, 60, 85},
      {71, 72, 279},
      {71, 73, 72},
      {73, 71, 74},
      {73, 74, 75},
      {133, 75, 74},
      {133, 74, 88},
      {76, 77, 57},
      {77, 76, 85},
      {77, 85, 60},
      {65, 57, 66},
      {65, 86, 57},
      {76, 57, 86},
      {79, 76, 86},
      {79, 86, 78},
      {79, 78, 283},
      {79, 283, 282},
      {100, 132, 202},
      {100, 99, 132},
      {80, 132, 99},
      {80, 99, 98},
      {203, 130, 204},
      {203, 83, 130},
      {83, 102, 130},
      {83, 279, 102},
      {279, 81, 102},
      {279, 72, 81},
      {129, 82, 204},
      {129, 92, 82},
      {82, 92, 100},
      {82, 100, 202},
      {281, 76, 79},
      {70, 83, 203},
      {70, 84, 83},
      {84, 279, 83},
      {84, 281, 279},
      {281, 84, 76},
      {85, 76, 84},
      {85, 84, 70},
      {86, 87, 78},
      {89, 86, 65},
      {86, 89, 87},
      {89, 88, 87},
      {89, 91, 88},
      {90, 91, 89},
      {90, 131, 91},
      {89, 65, 90},
      {100, 92, 93},
      {129, 93, 92},
      {129, 94, 93},
      {95, 93, 94},
      {95, 97, 93},
      {96, 93, 97},
      {98, 93, 96},
      {98, 99, 93},
      {100, 93, 99},
      {101, 95, 102},
      {101, 97, 95},
      {103, 97, 101},
      {103, 96, 97},
      {98, 96, 103},
      {98, 103, 80},
      {107, 116, 104},
      {108, 116, 107},
      {110, 116, 108},
      {105, 116, 110},
      {112, 116, 105},
      {104, 127, 106},
      {104, 106, 241},
      {107, 104, 241},
      {107, 241, 109},
      {108, 107, 109},
      {108, 109, 242},
      {110, 108, 242},
      {110, 242, 111},
      {105, 110, 111},
      {105, 111, 245},
      {112, 105, 245},
      {112, 245, 113},
      {247, 112, 113},
      {247, 114, 112},
      {114, 116, 112},
      {121, 116, 114},
      {122, 116, 121},
      {115, 116, 122},
      {117, 116, 115},
      {118, 116, 117},
      {119, 116, 118},
      {125, 116, 119},
      {121, 114, 247},
      {121, 247, 120},
      {249, 121, 120},
      {249, 122, 121},
      {234, 122, 249},
      {234, 115, 122},
      {123, 115, 234},
      {123, 117, 115},
      {236, 117, 123},
      {236, 118, 117},
      {235, 118, 236},
      {235, 119, 118},
      {126, 119, 235},
      {126, 125, 119},
      {124, 116, 125},
      {127, 116, 124},
      {104, 116, 127},
      {127, 128, 106},
      {127, 124, 128},
      {124, 126, 128},
      {130, 129, 204},
      {130, 94, 129},
      {102, 94, 130},
      {102, 95, 94},
      {132, 131, 202},
      {132, 91, 131},
      {91, 132, 80},
      {91, 80, 88},
      {194, 88, 80},
      {194, 133, 88},
      {135, 134, 142},
      {135, 315, 134},
      {315, 135, 144},
      {315, 144, 317},
      {317, 144, 136},
      {317, 136, 137},
      {137, 136, 138},
      {137, 138, 139},
      {139, 138, 140},
      {139, 140, 141},
      {143, 142, 179},
      {143, 135, 142},
      {320, 135, 143},
      {320, 144, 135},
      {145, 144, 320},
      {145, 136, 144},
      {321, 136, 145},
      {321, 138, 136},
      {138, 321, 146},
      {138, 146, 140},
      {148, 168, 147},
      {148, 147, 149},
      {149, 147, 256},
      {149, 256, 150},
      {150, 256, 255},
      {150, 255, 151},
      {151, 255, 254},
      {151, 254, 152},
      {254, 153, 152},
      {254, 155, 153},
      {155, 154, 153},
      {155, 250, 154},
      {250, 156, 154},
      {250, 266, 156},
      {266, 159, 156},
      {266, 157, 159},
      {157, 264, 158},
      {264, 161, 158},
      {264, 262, 161},
      {262, 160, 161},
      {262, 162, 160},
      {162, 163, 160},
      {162, 261, 163},
      {163, 261, 165},
      {163, 165, 164},
      {164, 165, 260},
      {164, 260, 166},
      {166, 260, 259},
      {166, 259, 167},
      {167, 259, 168},
      {167, 168, 148},
      {173, 272, 271},
      {173, 169, 272},
      {173, 170, 169},
      {173, 171, 170},
      {173, 172, 171},
      {173, 275, 172},
      {173, 276, 275},
      {173, 174, 276},
      {173, 176, 174},
      {173, 175, 176},
      {173, 267, 175},
      {173, 268, 267},
      {173, 177, 268},
      {173, 269, 177},
      {81, 101, 102},
      {81, 195, 101},
      {101, 195, 178},
      {101, 178, 103},
      {103, 178, 194},
      {103, 194, 80},
      {179, 142, 180},
      {179, 180, 181},
      {180, 183, 181},
      {180, 182, 183},
      {184, 183, 182},
      {184, 186, 183},
      {188, 186, 184},
      {188, 185, 186},
      {187, 185, 188},
      {187, 189, 185},
      {189, 187, 190},
      {189, 190, 191},
      {190, 192, 191},
      {190, 193, 192},
      {193, 314, 192},
      {193, 134, 314},
      {194, 75, 133},
      {194, 178, 75},
      {195, 75, 178},
      {195, 73, 75},
      {81, 73, 195},
      {81, 72, 73},
      {230, 345, 324},
      {230, 324, 227},
      {324, 225, 227},
      {324, 327, 225},
      {327, 196, 225},
      {327, 328, 196},
      {328, 221, 196},
      {328, 330, 221},
      {330, 198, 221},
      {330, 197, 198},
      {197, 218, 198},
      {197, 331, 218},
      {218, 331, 332},
      {218, 332, 219},
      {332, 214, 219},
      {332, 333, 214},
      {214, 333, 199},
      {214, 199, 215},
      {215, 199, 334},
      {215, 334, 211},
      {211, 334, 336},
      {211, 336, 200},
      {200, 336, 338},
      {200, 338, 208},
      {208, 338, 339},
      {208, 339, 206},
      {339, 201, 206},
      {339, 342, 201},
      {342, 232, 201},
      {342, 343, 232},
      {232, 343, 345},
      {232, 345, 230},
      {131, 82, 202},
      {131, 67, 82},
      {82, 67, 203},
      {82, 203, 204},
      {205, 201, 231},
      {205, 206, 201},
      {207, 206, 205},
      {207, 208, 206},
      {209, 208, 207},
      {209, 200, 208},
      {210, 200, 209},
      {210, 211, 200},
      {213, 211, 210},
      {213, 215, 211},
      {212, 215, 213},
      {212, 214, 215},
      {216, 214, 212},
      {216, 219, 214},
      {217, 219, 216},
      {220, 218, 217},
      {220, 198, 218},
      {222, 198, 220},
      {222, 221, 198},
      {223, 221, 222},
      {223, 196, 221},
      {224, 196, 223},
      {224, 225, 196},
      {226, 225, 224},
      {226, 227, 225},
      {228, 227, 226},
      {228, 230, 227},
      {229, 230, 228},
      {229, 232, 230},
      {231, 232, 229},
      {231, 201, 232},
      {251, 234, 233},
      {251, 123, 234},
      {252, 123, 251},
      {252, 236, 123},
      {237, 236, 252},
      {237, 235, 236},
      {126, 235, 237},
      {126, 237, 253},
      {128, 126, 253},
      {128, 253, 238},
      {106, 128, 238},
      {106, 238, 239},
      {241, 106, 239},
      {241, 239, 240},
      {109, 241, 240},
      {109, 240, 258},
      {242, 109, 258},
      {242, 258, 257},
      {111, 242, 257},
      {111, 257, 243},
      {245, 111, 243},
      {245, 243, 244},
      {263, 245, 244},
      {263, 113, 245},
      {246, 113, 263},
      {246, 247, 113},
      {248, 247, 246},
      {248, 120, 247},
      {265, 120, 248},
      {265, 249, 120},
      {233, 249, 265},
      {233, 234, 249},
      {250, 233, 266},
      {250, 251, 233},
      {155, 251, 250},
      {155, 252, 251},
      {237, 252, 155},
      {237, 155, 254},
      {253, 237, 254},
      {253, 254, 255},
      {238, 253, 255},
      {238, 255, 256},
      {147, 238, 256},
      {147, 239, 238},
      {240, 239, 147},
      {240, 147, 168},
      {258, 240, 168},
      {258, 168, 259},
      {257, 258, 259},
      {257, 259, 260},
      {243, 257, 260},
      {243, 260, 165},
      {244, 243, 165},
      {244, 165, 261},
      {162, 244, 261},
      {162, 263, 244},
      {262, 263, 162},
      {262, 246, 263},
      {264, 246, 262},
      {264, 248, 246},
      {157, 248, 264},
      {157, 265, 248},
      {266, 265, 157},
      {266, 233, 265},
      {312, 267, 268},
      {312, 268, 286},
      {286, 268, 177},
      {286, 177, 288},
      {177, 290, 288},
      {177, 269, 290},
      {290, 269, 173},
      {290, 173, 270},
      {270, 173, 271},
      {270, 271, 293},
      {293, 271, 272},
      {293, 272, 273},
      {273, 272, 169},
      {273, 169, 296},
      {169, 274, 296},
      {169, 170, 274},
      {274, 170, 171},
      {274, 171, 300},
      {300, 171, 172},
      {300, 172, 302},
      {302, 172, 275},
      {302, 275, 304},
      {275, 307, 304},
      {275, 276, 307},
      {276, 308, 307},
      {276, 174, 308},
      {174, 277, 308},
      {174, 176, 277},
      {176, 310, 277},
      {176, 175, 310},
      {310, 175, 267},
      {310, 267, 312},
      {285, 87, 88},
      {74, 285, 88},
      {71, 285, 74},
      {71, 278, 285},
      {278, 71, 279},
      {281, 278, 279},
      {281, 280, 278},
      {79, 280, 281},
      {79, 282, 280},
      {280, 282, 283},
      {280, 283, 284},
      {284, 283, 78},
      {284, 78, 87},
      {285, 284, 87},
      {284, 285, 278},
      {284, 278, 280},
      {313, 312, 286},
      {313, 286, 287},
      {287, 286, 288},
      {287, 288, 289},
      {289, 288, 290},
      {289, 290, 291},
      {291, 290, 270},
      {291, 270, 292},
      {292, 270, 293},
      {292, 293, 294},
      {294, 293, 273},
      {294, 273, 295},
      {295, 273, 296},
      {295, 296, 297},
      {296, 299, 297},
      {296, 274, 299},
      {274, 298, 299},
      {274, 300, 298},
      {300, 301, 298},
      {300, 302, 301},
      {302, 303, 301},
      {302, 304, 303},
      {304, 306, 303},
      {304, 307, 306},
      {307, 305, 306},
      {307, 308, 305},
      {308, 309, 305},
      {308, 277, 309},
      {277, 311, 309},
      {277, 310, 311},
      {311, 310, 312},
      {134, 319, 314},
      {134, 315, 319},
      {315, 316, 319},
      {315, 317, 316},
      {317, 318, 316},
      {317, 137, 318},
      {137, 322, 318},
      {137, 139, 322},
      {17, 322, 139},
      {17, 139, 141},
      {314, 143, 179},
      {314, 319, 143},
      {319, 320, 143},
      {319, 316, 320},
      {316, 145, 320},
      {316, 318, 145},
      {318, 321, 145},
      {318, 322, 321},
      {146, 321, 322},
      {146, 322, 17},
      {323, 324, 345},
      {323, 325, 324},
      {325, 327, 324},
      {325, 326, 327},
      {327, 326, 38},
      {327, 38, 328},
      {38, 330, 328},
      {38, 329, 330},
      {330, 329, 34},
      {330, 34, 197},
      {34, 331, 197},
      {34, 30, 331},
      {331, 30, 42},
      {331, 42, 332},
      {42, 333, 332},
      {42, 48, 333},
      {333, 48, 49},
      {333, 49, 199},
      {49, 334, 199},
      {49, 335, 334},
      {334, 335, 53},
      {334, 53, 336},
      {53, 338, 336},
      {53, 337, 338},
      {338, 337, 340},
      {338, 340, 339},
      {339, 340, 341},
      {339, 341, 342},
      {341, 343, 342},
      {341, 344, 343},
      {343, 344, 323},
      {343, 323, 345},
    };
    // clang-format on

    ScoutJawModel* jaw;

    ScoutHeadModel() : Model(&verts, &faces)  {
      //Load model tri and faces
      SetupModel();
    }

    void Update(float elapsedTime) override {}

  private:
    IDrzEngine* engine;
};


struct animframe {
  float tX, tY, tZ;
  float rX, rY, rZ;
};

class Scout {
  public: 
    Scout(IDrzEngine* engine, Scene* scene) {

      rotationDistribution = std::uniform_real_distribution<float>(-1.0f, 1.0f); // Small random rotations in degrees
      translationDistribution = std::uniform_real_distribution<float>(-0.1f, 0.1f); // Small random translations
      InitializeRandomGenerator();
      _startAnimation();

      head = new ScoutHeadModel();
      jaw = new ScoutJawModel();   
      scene->AddModel(head);
      scene->AddModel(jaw);
    }

    void SetJawOpening(float opening) {
      if(opening < 0.0f) {
        opening = 0.0f;
      } else if(opening > 1.0f) {
        opening = 1.0f;
      }
      jawOpening = opening;
      jaw->SetOpening( opening);
    }

    void Update(float elapsedTime) {
    
      _updateAnimation(elapsedTime, 1.0f);

      //Set models matrices
      
      head->rotationMatrix = rotationMatrix;
      head->translationMatrix = translationMatrix;

      jaw->rotationMatrix = rotationMatrix;
      jaw->translationMatrix = translationMatrix;
    }
    
  private:
    std::default_random_engine generator;
    std::uniform_real_distribution<float> rotationDistribution;
    std::uniform_real_distribution<float> translationDistribution;

    ScoutHeadModel* head;
    ScoutJawModel* jaw;

    Matrix4x4 rotationMatrix = Matrix4x4::Identity(); // Initialize with your current rotation matrix
    Matrix4x4 translationMatrix = Matrix4x4::Identity(); // Initialize with an identity matrix for no initial translation
    
    float jawOpening = 0.0f; //0.0f closed, 1.0f open
    float t = 0.0f;

    animframe animTarget = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    animframe animCurrent = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    animframe animInitial = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    animframe animTargetMax = {0.03f, 0.03f, 0.03f, 0.2f, 0.2f, 0.2f};

    void InitializeRandomGenerator() {
      std::random_device rd;
      generator.seed(rd());
    }

    void _calcNextTarget() {
      
      animInitial = animCurrent;
      animTarget = animCurrent;

      // Generate small random angles for rotation
      float deltaPitch = rotationDistribution(generator);
      float deltaYaw = rotationDistribution(generator);
      float deltaRoll = rotationDistribution(generator);
      
      // Convert angles to radians
      float pitchRad = deltaPitch * (M_PI / 180.0f);
      float yawRad = deltaYaw * (M_PI / 180.0f);
      float rollRad = deltaRoll * (M_PI / 180.0f);

      // Generate small random translations
      float deltaX = translationDistribution(generator);
      float deltaY = translationDistribution(generator);
      float deltaZ = translationDistribution(generator);

      // update target
      animTarget.tX += deltaX;
      animTarget.tY += deltaY;
      animTarget.tZ += deltaZ;
      animTarget.rX += pitchRad;
      animTarget.rY += yawRad;
      animTarget.rZ += rollRad;

      if(animTarget.tX > animTargetMax.tX) {
        animTarget.tX = animTargetMax.tX;
      }
      if(animTarget.tY > animTargetMax.tY) {
        animTarget.tY = animTargetMax.tY;
      }
      if(animTarget.tZ > animTargetMax.tZ) {
        animTarget.tZ = animTargetMax.tZ;
      }
      if(animTarget.rX > animTargetMax.rX) {
        animTarget.rX = animTargetMax.rX;
      }
      if(animTarget.rY > animTargetMax.rY) {
        animTarget.rY = animTargetMax.rY;
      }
      if(animTarget.rZ > animTargetMax.rZ) {
        animTarget.rZ = animTargetMax.rZ;
      }
    }

    void _startAnimation() {
      t = 0.0f;
      _calcNextTarget();
    }

    void _updateAnimation(float elapsedTime, float speed = 1.0f) {

      //not sure !
      t += elapsedTime * speed;

      //interpolate
      animCurrent.tX = animInitial.tX * (1.0f - t) + animTarget.tX * t;
      animCurrent.tY = animInitial.tY * (1.0f - t) + animTarget.tY * t;
      animCurrent.tZ = animInitial.tZ * (1.0f - t) + animTarget.tZ * t;
      animCurrent.rX = animInitial.rX * (1.0f - t) + animTarget.rX * t;
      animCurrent.rY = animInitial.rY * (1.0f - t) + animTarget.rY * t;
      animCurrent.rZ = animInitial.rZ * (1.0f - t) + animTarget.rZ * t;

      rotationMatrix = Matrix4x4::CreateRotationMatrix(animCurrent.rX, animCurrent.rY, animCurrent.rZ);
      translationMatrix = Matrix4x4::CreateTranslationMatrix(animCurrent.tX, animCurrent.tY, animCurrent.tZ);

      //check if anim is done
      if(t >= 1.0f) {
        animCurrent = animTarget;
        _calcNextTarget();
        t = 0.0f;
        return;
      }
    }
};