#pragma once

#include <IDrzEngine.h>

#include "Model.h"
#include "Scene.h"

#include <cmath>
#include <random>



class ScoutMicModel : public Model {
  public:
    // clang-format off 
    //Hardcoded face model vertices
    std::vector<vec3d> verts = {
      {0.507854, 0.840213, -1.35998},
      {1.36524, 0.122381, -0.215765},
      {1.36524, 0.23939, -0.0001015},
      {1.36524, -0.228631, -0.0001015},
      {1.36524, 0.122381, 0.215561},
      {1.36524, -0.111622, 0.215561},
      {1.14942, 0.122381, 0.215561},
      {1.14942, -0.111622, 0.215561},
      {1.14942, -0.228631, -0.0001015},
      {1.14942, -0.111622, -0.215765},
      {1.36524, -0.111622, -0.215765},
      {1.14942, 0.122381, -0.215765},
      {1.14942, 0.23939, -0.0001015},
      {1.15506, 0.144676, -0.118975},
      {1.14957, 0.361088, -0.786205},
      {0.976444, 0.559685, -1.14073},
      {0.969969, 0.67794, -1.07591},
      {0.524748, 0.739399, -1.45636},
      {0.524748, 0.857497, -1.39139},
      {1.15505, 0.026537, -0.18397},
      {1.1054, 0.357934, -0.779761},
      {0.944818, 0.546297, -1.11607},
      {0.507854, 0.72212, -1.42494},
      {1.10984, 0.408419, -0.149173},
      {1.10984, 0.196255, -0.406077},
      {1.10984, 0.138481, 0.42496},
      {1.10984, -0.37373, -0.195258},
      {1.10984, -0.185497, 0.405874},
      {1.11055, 0.0268555, -0.183771},
      {1.15435, -0.047348, -0.176323},
      {1.10984, -0.0473445, -0.176319},
      {1.15435, -0.148995, -0.0850325},
      {1.10984, -0.148995, -0.0850325},
      {1.15435, -0.160213, 0.056007},
      {1.10984, -0.0744275, 0.164178},
      {1.10984, -0.160209, 0.056007},
      {1.15435, 0.0581035, 0.176116},
      {1.15435, -0.074438, 0.164178},
      {1.10984, 0.0581035, 0.176116},
      {1.15435, 0.159747, 0.084826},
      {1.10984, 0.159754, 0.0848295},
      {1.10984, 0.170968, -0.05621},
      {1.15435, 0.170968, -0.05621},
      {1.10984, -0.397663, 0.14897},
      {1.06036, 0.153573, 0.473144},
      {1.10984, 0.384489, 0.195055},
      {1.06036, 0.427462, 0.217175},
      {1.06036, 0.454104, -0.166072},
      {1.10984, -0.127722, -0.425166},
      {1.06036, -0.416703, -0.217378},
      {1.06036, -0.20713, 0.451892},
      {0.62238, -0.214239, 0.467029},
      {0.62238, 0.15854, 0.488996},
      {0.62238, 0.441609, 0.224452},
      {0.62238, 0.469143, -0.171629},
      {0.62238, 0.225015, -0.467233},
      {1.06036, 0.217889, -0.452095},
      {0.62238, -0.147763, -0.489199},
      {1.06036, -0.14281, -0.47335},
      {0.62238, -0.430833, -0.224654},
      {1.06036, -0.443345, 0.165869},
      {0.62238, -0.458371, 0.171427},
      {1.11055, 0.145002, -0.118772},
      {1.15356, 0.479707, -0.722197},
      {0.938343, 0.664549, -1.05125},
      {1.10939, 0.476557, -0.71575},
    };
    std::vector<face> faces = {
      {65, 64, 17},
      {3, 11, 2},
      {3, 4, 11},
      {3, 6, 4},
      {3, 5, 6},
      {5, 8, 6},
      {5, 7, 8},
      {6, 9, 4},
      {6, 8, 9},
      {4, 10, 11},
      {4, 9, 10},
      {11, 12, 2},
      {11, 10, 12},
      {2, 13, 3},
      {2, 12, 13},
      {3, 7, 5},
      {3, 13, 7},
      {15, 14, 20},
      {15, 64, 14},
      {1, 17, 19},
      {23, 65, 1},
      {21, 20, 29},
      {21, 15, 20},
      {64, 16, 17},
      {55, 57, 56},
      {29, 20, 30},
      {29, 30, 31},
      {30, 33, 31},
      {30, 32, 33},
      {34, 33, 32},
      {34, 36, 33},
      {38, 36, 34},
      {38, 35, 36},
      {37, 35, 38},
      {37, 39, 35},
      {39, 37, 40},
      {39, 40, 41},
      {40, 42, 41},
      {40, 43, 42},
      {43, 63, 42},
      {43, 14, 63},
      {53, 51, 45},
      {60, 59, 50},
      {58, 57, 59},
      {45, 28, 26},
      {54, 48, 55},
      {49, 50, 59},
      {61, 60, 50},
      {26, 47, 45},
      {61, 28, 51},
      {47, 24, 48},
      {51, 62, 61},
      {48, 25, 57},
      {50, 44, 61},
      {25, 59, 57},
      {45, 54, 53},
      {14, 66, 63},
      {14, 64, 66},
      {23, 16, 22},
      {18, 1, 19},
      {63, 21, 29},
      {63, 66, 21},
      {66, 22, 21},
      {18, 17, 16},
      {15, 22, 16},
      {44, 49, 24},
      {65, 66, 64},
      {1, 65, 17},
      {23, 22, 65},
      {64, 15, 16},
      {55, 48, 57},
      {53, 52, 51},
      {60, 58, 59},
      {58, 56, 57},
      {45, 51, 28},
      {54, 47, 48},
      {49, 27, 50},
      {61, 62, 60},
      {26, 46, 47},
      {61, 44, 28},
      {47, 46, 24},
      {51, 52, 62},
      {48, 24, 25},
      {50, 27, 44},
      {25, 49, 59},
      {45, 47, 54},
      {23, 18, 16},
      {18, 23, 1},
      {66, 65, 22},
      {18, 19, 17},
      {15, 21, 22},
      {24, 46, 26},
      {26, 28, 44},
      {44, 27, 49},
      {49, 25, 24},
      {24, 26, 44},
    };
    // clang-format on

    ScoutMicModel() : Model(&verts, &faces){ 
      SetupModel();
    }

    void Update(float elapsedTime) override {}
};

class ScoutJawModel : public Model {
  public:
    // clang-format off 
    //Hardcoded face model vertices
    std::vector<vec3d> verts = {
      {0.498453, 0.609942, -0.121895},
      {-0.490175, 0.99133, -0.220153},
      {-0.480137, 0.609942, -0.121895},
      {0.508491, 0.99133, -0.220153},
      {0.30827, 1.0936, -1.03093},
      {0.0091595, 1.09374, -1.08808},
      {0.328136, 0.562328, -1.11536},
      {0.0091595, 0.562328, -1.17249},
      {-0.289954, 1.0936, -1.03093},
      {-0.30982, 0.562328, -1.11536},
    };
    std::vector<face> faces = {
      {1, 4, 2},
      {1, 2, 3},
      {4, 5, 6},
      {9, 2, 6},
      {7, 4, 1},
      {7, 5, 4},
      {6, 5, 7},
      {6, 7, 8},
      {10, 6, 8},
      {10, 9, 6},
      {2, 9, 10},
      {2, 10, 3},
      {4, 6, 2},
    };
    // clang-format on

    ScoutJawModel() : Model(&verts, &faces){ 
      SetupModel();
    }

    //Set the current jaw angle
    //map jaw opening to min and max angles
    void SetOpening(float opening) {
      if(opening < 0.0f) {
        opening = 0.0f;
      } else if(opening > 1.0f) {
        opening = 1.0f;
      }
      this->opening = opening;
      angle = opening * (maxAngle - minAngle) + minAngle;
      SetAngle(angle);
    }

    void Update(float elapsedTime) override {

      // Rotate the model
      if(direction == 1) {
        angle += 0.001f;
      } else {
        angle -= 0.001f;
      }
      
      if(angle> maxAngle) {
        direction = -1;
      } else if (angle <= minAngle) {
        direction = 1;
      }

      Matrix4x4 matRotX = Matrix4x4::CreateRotationMatrixX(angle); 
      rotationMatrix = rotationMatrix * matRotX;
    }

  private:
    int direction = 1;  //1 for increasing angle, -1 for decreasing angle
    float opening = 0.5f;
    float angle = M_PI;
    float minAngle = -0.2f;
    float maxAngle = 0.0f;

    void SetAngle(float angle) {
      if(angle > maxAngle) {
        this->angle =  maxAngle;
      } else if (angle < minAngle) {
        this->angle = minAngle;
      } else {
        this->angle = angle;
      }
    }
};
 
//3d face model including animated subparts
class ScoutHeadModel : public Model {
  public:
    // clang-format off 
    //Hardcoded face model vertices
    std::vector<vec3d> verts = {
      {-0.309207, -0.399546, -1.0831},
      {0.33537, -0.269836, -1.09465},
      {-0.309207, -0.415555, -1.02924},
      {0.380125, -0.285257, -1.09465},
      {0.400869, -0.268002, -1.0831},
      {-0.374707, -0.376974, -1.0831},
      {-0.388311, -0.388297, -1.02924},
      {0.398664, -0.32249, -1.09465},
      {0.427997, -0.32249, -1.0831},
      {-0.421078, -0.32249, -1.02924},
      {0.33537, -0.375144, -1.09465},
      {-0.309207, -0.229425, -1.02924},
      {0.33537, -0.245434, -1.0831},
      {0.380125, -0.359719, -1.09465},
      {0.290612, -0.359719, -1.09465},
      {0.272076, -0.32249, -1.09465},
      {-0.197333, -0.32249, -1.02924},
      {-0.243709, -0.376974, -1.0831},
      {0.269871, -0.268002, -1.0831},
      {-0.2301, -0.388297, -1.02924},
      {0.290612, -0.285257, -1.09465},
      {-0.309207, -0.439492, -1.01848},
      {0.242739, -0.32249, -1.0831},
      {0.283549, 0.614877, 0.035609},
      {0.283413, 0.09786, 0.257093},
      {-0.265097, 0.09786, 0.257093},
      {-0.288851, 0.539788, 0.45276},
      {0.321808, 0.041412, 0.688398},
      {0.605178, 0.557032, 0.356825},
      {0.307167, 0.539788, 0.45276},
      {0.0091595, -0.538135, 1.05631},
      {0.0091595, 0.02576, 0.751503},
      {-0.303492, 0.041412, 0.688398},
      {-0.764729, 0.057071, 0.562114},
      {-0.232834, -0.561995, -1.03409},
      {-0.763357, -0.321198, -1.53264},
      {-0.240215, -0.56336, -1.79283},
      {0.25115, -0.561995, -1.03409},
      {0.258531, -0.56336, -1.79283},
      {-0.562446, 0.689965, -0.373201},
      {-0.265234, 0.614877, 0.035609},
      {0.355159, 0.561375, -1.18116},
      {-0.336843, 0.561375, -1.18116},
      {0.887309, -0.423203, -0.662599},
      {-0.860675, -0.423203, -1.53264},
      {-0.980514, -0.479192, 0.174849},
      {-0.782418, 0.083419, -0.0749455},
      {-0.586863, 0.557032, 0.356825},
      {0.580762, 0.689965, -0.373201},
      {0.50323, 0.118153, -0.924126},
      {0.778442, -0.325073, -0.667086},
      {0.800734, 0.083419, -0.0749455},
      {0.783045, 0.057071, 0.562114},
      {0.998833, -0.479192, 0.174849},
      {0.0091595, -1.39108, 0.97769},
      {-0.81488, -1.32745, 0.0261905},
      {-0.724689, -1.27072, -0.822125},
      {0.29449, -1.24655, -1.18357},
      {-0.276171, -1.24655, -1.18357},
      {0.743005, -1.27072, -0.822125},
      {0.833196, -1.32745, 0.0261905},
      {0.722256, -1.3801, 0.804174},
      {-0.244668, -0.687883, -1.06225},
      {-0.868994, -0.423203, -0.662599},
      {0.262983, -0.687883, -1.06225},
      {-0.703941, -1.3801, 0.804174},
      {0.85238, -0.526788, 0.876894},
      {0.781672, -0.321198, -1.53264},
      {-0.308123, -0.205496, -0.799645},
      {-0.361946, -0.2144, -0.799648},
      {-0.407578, -0.239764, -0.799652},
      {-0.438067, -0.277725, -0.799652},
      {-0.44877, -0.3225, -0.799655},
      {-0.438064, -0.367272, -0.799652},
      {-0.407575, -0.405234, -0.799652},
      {-0.361942, -0.430595, -0.799648},
      {-0.254292, -0.430591, -0.799641},
      {-0.308119, -0.439498, -0.799645},
      {-0.178174, -0.367269, -0.799638},
      {-0.208663, -0.405234, -0.799641},
      {-0.167468, -0.322497, -0.799638},
      {-0.178178, -0.277721, -0.799638},
      {-0.208666, -0.239761, -0.799641},
      {-0.254296, -0.2144, -0.799641},
      {0.26088, -0.68649, -1.79459},
      {0.878994, -0.423203, -1.53264},
      {-0.242564, -0.68649, -1.79459},
      {0.476021, -0.32249, -1.01848},
      {0.414474, -0.256683, -1.02924},
      {0.434826, -0.239757, -1.01848},
      {0.256263, -0.256683, -1.02924},
      {0.194719, -0.32249, -1.01848},
      {-0.309207, -0.439492, -0.799621},
      {-0.834061, -0.526788, 0.876894},
      {0.235914, -0.405226, -0.799621},
      {0.235914, -0.405226, -1.01848},
      {-0.209751, -0.405226, -1.01848},
      {-0.209751, -0.405226, -0.799621},
      {0.194719, -0.32249, -0.799621},
      {-0.168556, -0.32249, -0.799621},
      {-0.209751, -0.239757, -0.799621},
      {-0.309207, -0.205485, -1.01848},
      {0.235914, -0.239757, -0.799621},
      {-0.309207, -0.205485, -0.799621},
      {0.235914, -0.239757, -1.01848},
      {0.33537, -0.205485, -0.799621},
      {-0.40866, -0.239757, -1.01848},
      {-0.40866, -0.239757, -0.799621},
      {0.33537, -0.205485, -1.01848},
      {0.434826, -0.239757, -0.799621},
      {-0.449858, -0.32249, -0.799621},
      {-0.40866, -0.405226, -1.01848},
      {0.476021, -0.32249, -0.799621},
      {-0.40866, -0.405226, -0.799621},
      {-0.449858, -0.32249, -1.01848},
      {0.434826, -0.405226, -0.799621},
      {0.434826, -0.405226, -1.01848},
      {-0.388311, -0.256683, -1.02924},
      {0.33537, -0.439492, -0.799621},
      {-0.209751, -0.239757, -1.01848},
      {-0.2301, -0.256683, -1.02924},
      {0.33537, -0.439492, -1.01848},
      {-0.298557, -0.272135, -0.923811},
      {-0.760126, -0.325073, -0.667086},
      {-0.22282, 0.14462, -1.06073},
      {-0.484915, 0.118153, -0.924126},
      {-0.163842, 0.561375, -1.22921},
      {0.182158, 0.561375, -1.22921},
      {0.241136, 0.14462, -1.06073},
      {0.316873, -0.272135, -0.923811},
      {-0.168556, -0.32249, -1.01848},
      {0.414474, -0.388297, -1.02924},
      {0.400869, -0.376974, -1.0831},
      {-0.401835, -0.32249, -1.0831},
      {-0.353962, -0.285257, -1.09465},
      {0.447241, -0.32249, -1.02924},
      {-0.374707, -0.268002, -1.0831},
      {-0.372502, -0.32249, -1.09465},
      {-0.353962, -0.359719, -1.09465},
      {0.33537, -0.229425, -1.02924},
      {-0.26445, -0.359719, -1.09465},
      {-0.309207, -0.245434, -1.0831},
      {-0.309207, -0.375144, -1.09465},
      {0.223496, -0.32249, -1.02924},
      {-0.216577, -0.32249, -1.0831},
      {-0.245914, -0.32249, -1.09465},
      {0.256263, -0.388297, -1.02924},
      {0.269871, -0.376974, -1.0831},
      {-0.243709, -0.268002, -1.0831},
      {-0.26445, -0.285257, -1.09465},
      {0.33537, -0.415555, -1.02924},
      {0.33537, -0.399546, -1.0831},
      {-0.309207, -0.269836, -1.09465},
    };
    std::vector<face> faces = {
      {108, 102, 107},
      {90, 136, 89},
      {141, 139, 135},
      {89, 9, 5},
      {120, 100, 131},
      {19, 16, 23},
      {145, 20, 18},
      {151, 133, 132},
      {100, 97, 131},
      {109, 89, 140},
      {117, 136, 88},
      {122, 147, 151},
      {19, 140, 13},
      {149, 12, 121},
      {120, 17, 121},
      {97, 17, 131},
      {3, 18, 20},
      {24, 26, 25},
      {24, 41, 26},
      {30, 25, 28},
      {30, 24, 25},
      {26, 27, 33},
      {26, 41, 27},
      {28, 33, 32},
      {33, 28, 25},
      {33, 25, 26},
      {30, 53, 29},
      {30, 28, 53},
      {28, 67, 53},
      {31, 67, 28},
      {31, 28, 32},
      {33, 31, 32},
      {33, 94, 31},
      {94, 33, 34},
      {34, 33, 27},
      {34, 27, 48},
      {35, 36, 124},
      {35, 37, 36},
      {37, 35, 38},
      {37, 38, 39},
      {68, 39, 38},
      {68, 38, 51},
      {40, 41, 24},
      {41, 40, 48},
      {41, 48, 27},
      {29, 24, 30},
      {29, 49, 24},
      {40, 24, 49},
      {43, 40, 49},
      {43, 49, 42},
      {43, 42, 128},
      {43, 128, 127},
      {62, 54, 67},
      {62, 61, 54},
      {44, 54, 61},
      {44, 61, 60},
      {46, 124, 64},
      {124, 45, 64},
      {124, 36, 45},
      {66, 31, 94},
      {66, 55, 31},
      {31, 55, 62},
      {31, 62, 67},
      {126, 40, 43},
      {34, 46, 94},
      {34, 47, 46},
      {47, 124, 46},
      {47, 126, 124},
      {126, 47, 40},
      {48, 40, 47},
      {48, 47, 34},
      {49, 50, 42},
      {52, 49, 29},
      {49, 52, 50},
      {52, 51, 50},
      {52, 54, 51},
      {53, 54, 52},
      {53, 67, 54},
      {52, 29, 53},
      {60, 61, 56},
      {59, 58, 60},
      {56, 57, 60},
      {57, 59, 60},
      {55, 66, 56},
      {61, 62, 55},
      {63, 57, 64},
      {63, 59, 57},
      {65, 59, 63},
      {65, 58, 59},
      {60, 58, 65},
      {60, 65, 44},
      {84, 79, 76},
      {133, 8, 9},
      {46, 66, 94},
      {46, 56, 66},
      {64, 56, 46},
      {64, 57, 56},
      {54, 44, 51},
      {86, 51, 44},
      {86, 68, 51},
      {14, 15, 21},
      {45, 63, 64},
      {45, 87, 63},
      {63, 87, 85},
      {63, 85, 65},
      {65, 85, 86},
      {65, 86, 44},
      {86, 39, 68},
      {86, 85, 39},
      {87, 39, 85},
      {87, 37, 39},
      {45, 37, 87},
      {45, 36, 37},
      {23, 147, 144},
      {141, 1, 143},
      {96, 99, 92},
      {10, 112, 115},
      {109, 110, 90},
      {18, 146, 145},
      {139, 1, 6},
      {117, 119, 122},
      {15, 152, 148},
      {10, 107, 118},
      {4, 13, 5},
      {134, 7, 10},
      {23, 91, 19},
      {137, 138, 134},
      {151, 148, 152},
      {97, 93, 22},
      {22, 7, 3},
      {13, 21, 19},
      {138, 6, 134},
      {113, 117, 88},
      {93, 112, 22},
      {144, 105, 91},
      {3, 6, 1},
      {137, 12, 142},
      {119, 96, 122},
      {20, 22, 3},
      {5, 8, 4},
      {102, 118, 107},
      {14, 152, 11},
      {134, 118, 137},
      {9, 132, 133},
      {130, 50, 51},
      {38, 130, 51},
      {35, 130, 38},
      {35, 123, 130},
      {123, 35, 124},
      {126, 123, 124},
      {126, 125, 123},
      {43, 125, 126},
      {43, 127, 125},
      {125, 127, 128},
      {125, 128, 129},
      {129, 128, 42},
      {129, 42, 50},
      {130, 129, 50},
      {129, 130, 123},
      {129, 123, 125},
      {109, 91, 105},
      {150, 142, 149},
      {16, 148, 23},
      {102, 121, 12},
      {144, 96, 92},
      {112, 111, 115},
      {90, 113, 88},
      {111, 107, 115},
      {132, 122, 151},
      {121, 145, 149},
      {99, 105, 92},
      {149, 146, 150},
      {5, 140, 89},
      {102, 101, 120},
      {103, 109, 105},
      {142, 135, 137},
      {61, 55, 56},
      {108, 104, 102},
      {90, 88, 136},
      {135, 153, 150},
      {150, 146, 141},
      {141, 143, 139},
      {139, 138, 135},
      {135, 150, 141},
      {89, 136, 9},
      {120, 101, 100},
      {19, 21, 16},
      {145, 17, 20},
      {151, 152, 133},
      {100, 98, 97},
      {109, 90, 89},
      {117, 132, 136},
      {122, 96, 147},
      {19, 91, 140},
      {149, 142, 12},
      {120, 131, 17},
      {97, 20, 17},
      {3, 1, 18},
      {76, 75, 74},
      {74, 73, 72},
      {72, 71, 70},
      {70, 69, 84},
      {84, 83, 82},
      {82, 81, 79},
      {79, 80, 77},
      {77, 78, 76},
      {76, 74, 72},
      {72, 70, 84},
      {84, 82, 79},
      {79, 77, 76},
      {76, 72, 84},
      {133, 14, 8},
      {21, 2, 4},
      {4, 8, 14},
      {14, 11, 15},
      {15, 16, 21},
      {21, 4, 14},
      {23, 148, 147},
      {141, 18, 1},
      {96, 95, 99},
      {10, 7, 112},
      {109, 106, 110},
      {18, 141, 146},
      {139, 143, 1},
      {117, 116, 119},
      {15, 11, 152},
      {10, 115, 107},
      {4, 2, 13},
      {134, 6, 7},
      {23, 144, 91},
      {137, 135, 138},
      {151, 147, 148},
      {97, 98, 93},
      {22, 112, 7},
      {13, 2, 21},
      {138, 139, 6},
      {113, 116, 117},
      {93, 114, 112},
      {144, 92, 105},
      {3, 7, 6},
      {137, 118, 12},
      {119, 95, 96},
      {20, 97, 22},
      {5, 9, 8},
      {102, 12, 118},
      {14, 133, 152},
      {134, 10, 118},
      {9, 136, 132},
      {109, 140, 91},
      {150, 153, 142},
      {16, 15, 148},
      {102, 120, 121},
      {144, 147, 96},
      {112, 114, 111},
      {90, 110, 113},
      {111, 108, 107},
      {132, 117, 122},
      {121, 17, 145},
      {99, 103, 105},
      {149, 145, 146},
      {5, 13, 140},
      {102, 104, 101},
      {103, 106, 109},
      {142, 153, 135},
    };
    // clang-format on

    ScoutHeadModel() : Model(&verts, &faces)  {
      //Load model tri and faces
      SetupModel();
    }

    void Update(float elapsedTime) override {}
};

struct animframe {
  float tX, tY, tZ;
  float rX, rY, rZ;
};

class Scout {
  public: 
    Scout(IDrzEngine* engine, Scene* scene) {

      rotationDistribution = std::uniform_real_distribution<float>(-1.0f, 1.0f); // Small random rotations in degrees
      translationDistribution = std::uniform_real_distribution<float>(-0.1f, 0.1f); // Small random translations
      InitializeRandomGenerator();
      _startAnimation();

      head = new ScoutHeadModel();
      jaw = new ScoutJawModel();   
      mic = new ScoutMicModel();
      scene->AddModel(head);
      scene->AddModel(jaw);
      scene->AddModel(mic);
    }

    void SetJawOpening(float opening) {
      if(opening < 0.0f) {
        opening = 0.0f;
      } else if(opening > 1.0f) {
        opening = 1.0f;
      }
      jawOpening = opening;
      jaw->SetOpening( opening);
    }

    void Update(float elapsedTime) {
    
      _updateAnimation(elapsedTime);

      //Set models matrices
      
      head->rotationMatrix = rotationMatrix;
      head->translationMatrix = translationMatrix;

      jaw->rotationMatrix = rotationMatrix;
      jaw->translationMatrix = translationMatrix;

      mic->rotationMatrix = rotationMatrix;
      mic->translationMatrix = translationMatrix;
    }
    
  private:
    std::default_random_engine generator;
    std::uniform_real_distribution<float> rotationDistribution;
    std::uniform_real_distribution<float> translationDistribution;

    ScoutHeadModel* head;
    ScoutJawModel* jaw;
    ScoutMicModel* mic;

    Matrix4x4 rotationMatrix = Matrix4x4::Identity(); // Initialize with your current rotation matrix
    Matrix4x4 translationMatrix = Matrix4x4::Identity(); // Initialize with an identity matrix for no initial translation
    
    float jawOpening = 0.0f; //0.0f closed, 1.0f open
    float t = 0.0f;
    float currentAnimationDuration = 0.0f;

    animframe animTarget = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    animframe animCurrent = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    animframe animInitial = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    animframe animTargetDeltaMax = {0.01f, 0.01f, 0.01f, 0.0005f, 0.0005f, 0.0005f};

    void InitializeRandomGenerator() {
      std::random_device rd;
      generator.seed(rd());
    }

    void _clamp(float& target, float deltaMax) {
      if(target > deltaMax) {
        target = deltaMax;
      } else if (target < -deltaMax) {
        target = -deltaMax;
      }
    }

    void _clampTarget(animframe &target, animframe &deltaMax) {
      _clamp(target.tX, deltaMax.tX);
      _clamp(target.tY, deltaMax.tY);
      _clamp(target.tZ, deltaMax.tZ);
      _clamp(target.rX, deltaMax.rX);
      _clamp(target.rY, deltaMax.rY);
      _clamp(target.rZ, deltaMax.rZ);
    }

    void _calcNextTarget() {
      
      animInitial = animCurrent;
      animTarget = animCurrent;

      // Generate small random angles for rotation
      float deltaPitch = rotationDistribution(generator);
      float deltaYaw = rotationDistribution(generator);
      float deltaRoll = rotationDistribution(generator);
      
      // Convert angles to radians
      float pitchRad = deltaPitch * (M_PI / 180.0f);
      float yawRad = deltaYaw * (M_PI / 180.0f);
      float rollRad = deltaRoll * (M_PI / 180.0f);

      // Generate small random translations
      float deltaX = translationDistribution(generator);
      float deltaY = translationDistribution(generator);
      float deltaZ = translationDistribution(generator);

      // update target
      animTarget.tX += deltaX;
      animTarget.tY += deltaY;
      animTarget.tZ += deltaZ;
      animTarget.rX += pitchRad;
      animTarget.rY += yawRad;
      animTarget.rZ += rollRad;

      // Clamp target values
      _clampTarget(animTarget, animTargetDeltaMax);
    }

    void _startAnimation() {
      t = 0.0f;
      currentAnimationDuration = 0.5f;
      _calcNextTarget();
    }

    void _updateAnimation(float elapsedTime) {

      //not sure !
      t += elapsedTime / currentAnimationDuration;

      //interpolate
      animCurrent.tX = animInitial.tX * (1.0f - t) + animTarget.tX * t;
      animCurrent.tY = animInitial.tY * (1.0f - t) + animTarget.tY * t;
      animCurrent.tZ = animInitial.tZ * (1.0f - t) + animTarget.tZ * t;
      animCurrent.rX = animInitial.rX * (1.0f - t) + animTarget.rX * t;
      animCurrent.rY = animInitial.rY * (1.0f - t) + animTarget.rY * t;
      animCurrent.rZ = animInitial.rZ * (1.0f - t) + animTarget.rZ * t;

      rotationMatrix = Matrix4x4::CreateRotationMatrix(animCurrent.rX, animCurrent.rY, animCurrent.rZ);
      translationMatrix = Matrix4x4::CreateTranslationMatrix(animCurrent.tX, animCurrent.tY, animCurrent.tZ);

      //check if anim is done
      if(t >= 1.0f) {
        animCurrent = animTarget;
        _calcNextTarget();
        t = 0.0f;
        return;
      }
    }
};